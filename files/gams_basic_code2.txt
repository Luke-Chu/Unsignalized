*给变量设置相关范围
obj.l=0;

positive variables  v11, v12, v21, v22, v32, v33, v42, v43;
v11.up(t, c11)=v_max1;
v12.up(t, c12)=v_max1;
v21.up(t, c21)=v_max1;
v22.up(t, c22)=v_max1;
v32.up(t, c32)=v_max1;
v33.up(t, c33)=v_max1;
v42.up(t, c42)=v_max1;
v43.up(t, c43)=v_max1;


Equations
        posx11_2(t, c11)        11第二段的x坐标变化轨迹方程
        posx11_3(t, c11)        11第三段的x坐标变化轨迹方程
        posy11_1(t, c11)        11第一段的y坐标变化轨迹方程
        posy11_2(t, c11)        11第二段的y坐标变化轨迹方程

        posx21_1(t, c21)        21第一段的x坐标变化轨迹方程
        posx21_2(t, c21)        21第二段的x坐标变化轨迹方程
        posy21_2(t, c21)        21第二段的y坐标变化轨迹方程
        posy21_3(t, c21)        21第三段的y坐标变化轨迹方程

        posx33_2(t, c33)        33第二段的x坐标变化轨迹方程
        posx33_3(t, c33)        33第三段的x坐标变化轨迹方程
        posy33_1(t, c33)        33第一段的y坐标变化轨迹方程
        posy33_2(t, c33)        33第二段的y坐标变化轨迹方程

        posx43_1(t, c43)        43第一段的x坐标变化轨迹方程
        posx43_2(t, c43)        43第二段的x坐标变化轨迹方程
        posy43_2(t, c43)        43第二段的y坐标变化轨迹方程
        posy43_3(t, c43)        43第三段的y坐标变化轨迹方程

        ac11(t, c11)            11最大加速度约束
        dc11(t, c11)            11最大减速度约束

        ac12(t, c12)            12最大加速度约束
        dc12(t, c12)            12最大减速度约束

        ac21(t, c21)            21最大加速度约束
        dc21(t, c21)            21最大减速度约束

        ac22(t, c22)            22最大加速度约束
        dc22(t, c22)            22最大减速度约束

        ac32(t, c32)            32最大加速度约束
        dc32(t, c32)            32最大减速度约束

        ac33(t, c33)            33最大加速度约束
        dc33(t, c33)            33最大减速度约束

        ac42(t, c42)            42最大加速度约束
        dc42(t, c42)            42最大减速度约束

        ac43(t, c43)            43最大加速度约束
        dc43(t, c43)            43最大减速度约束

        cons_n11_1(t, c11)      11进入交叉口前n的整数变量确定式子1
        cons_n11_2(t, c11)      11进入交叉口前n的整数变量确定式子2
        cons_m11_1(t, c11)      11离开交叉口后m的整数变量确定式子1
        cons_m11_2(t, c11)      11离开交叉口后m的整数变量确定式子2

        cons_n12_1(t, c12)      12进入交叉口前n的整数变量确定式子1
        cons_n12_2(t, c12)      12进入交叉口前n的整数变量确定式子2
        cons_m12_1(t, c12)      12离开交叉口后m的整数变量确定式子1
        cons_m12_2(t, c12)      12离开交叉口后m的整数变量确定式子2

        cons_n21_1(t, c21)      21进入交叉口前n的整数变量确定式子1
        cons_n21_2(t, c21)      21进入交叉口前n的整数变量确定式子2
        cons_m21_1(t, c21)      21离开交叉口后m的整数变量确定式子1
        cons_m21_2(t, c21)      21离开交叉口后m的整数变量确定式子2

        cons_n22_1(t, c22)      22进入交叉口前n的整数变量确定式子1
        cons_n22_2(t, c22)      22进入交叉口前n的整数变量确定式子2
        cons_m22_1(t, c22)      22离开交叉口后m的整数变量确定式子1
        cons_m22_2(t, c22)      22离开交叉口后m的整数变量确定式子2

        cons_n32_1(t, c32)      32进入交叉口前n的整数变量确定式子1
        cons_n32_2(t, c32)      32进入交叉口前n的整数变量确定式子2
        cons_m32_1(t, c32)      32离开交叉口后m的整数变量确定式子1
        cons_m32_2(t, c32)      32离开交叉口后m的整数变量确定式子2

        cons_n33_1(t, c33)      33进入交叉口前n的整数变量确定式子1
        cons_n33_2(t, c33)      33进入交叉口前n的整数变量确定式子2
        cons_m33_1(t, c33)      33离开交叉口后m的整数变量确定式子1
        cons_m33_2(t, c33)      33离开交叉口后m的整数变量确定式子2

        cons_n42_1(t, c42)      42进入交叉口前n的整数变量确定式子1
        cons_n42_2(t, c42)      42进入交叉口前n的整数变量确定式子2
        cons_m42_1(t, c42)      42离开交叉口后m的整数变量确定式子1
        cons_m42_2(t, c42)      42离开交叉口后m的整数变量确定式子2

        cons_n43_1(t, c43)      43进入交叉口前n的整数变量确定式子1
        cons_n43_2(t, c43)      43进入交叉口前n的整数变量确定式子2
        cons_m43_1(t, c43)      43离开交叉口后m的整数变量确定式子1
        cons_m43_2(t, c43)      43离开交叉口后m的整数变量确定式子2

        safe11_1(t, c11)        11第一段需要保持的安全距离
        safe11_3(t, c11)        11第三段需要保持的安全距离
        safe21_1(t, c21)        21第一段需要保持的安全距离
        safe21_3(t, c21)        21第三段需要保持的安全距离
        safe33_1(t, c33)        33第一段需要保持的安全距离
        safe33_3(t, c33)        33第三段需要保持的安全距离
        safe43_1(t, c43)        43第一段需要保持的安全距离
        safe43_3(t, c43)        43第三段需要保持的安全距离

        safe12(t, c12)          12需要保持的安全距离
        safe22(t, c22)          22需要保持的安全距离
        safe32(t, c32)          32需要保持的安全距离
        safe42(t, c42)          42需要保持的安全距离

        cons_v11(t, c11)        11交叉口内的速度限制
        cons_v12(t, c12)        12交叉口内的速度限制
        cons_v21(t, c21)        21交叉口内的速度限制
        cons_v22(t, c22)        22交叉口内的速度限制
        cons_v32(t, c32)        32交叉口内的速度限制
        cons_v33(t, c33)        33交叉口内的速度限制
        cons_v42(t, c42)        42交叉口内的速度限制
        cons_v43(t, c43)        43交叉口内的速度限制

        next_posx11(t, c11)     11下一时刻x坐标位置计算
        next_posy11(t, c11)     11下一时刻y坐标位置计算

        next_posx21(t, c21)     21下一时刻x坐标位置计算
        next_posy21(t, c21)     21下一时刻y坐标位置计算

        next_posx33(t, c33)     33下一时刻x坐标位置计算
        next_posy33(t, c33)     33下一时刻y坐标位置计算

        next_posx43(t, c43)     43下一时刻x坐标位置计算
        next_posy43(t, c43)     43下一时刻y坐标位置计算

        next_posy12(t, c12)     12下一时刻y坐标位置计算
        next_posx22(t, c22)     22下一时刻x坐标位置计算
        next_posy32(t, c32)     32下一时刻y坐标位置计算
        next_posx42(t, c42)     42下一时刻x坐标位置计算

        object                  目标函数;

*开始定义方程约束
ac11(t + 1, c11)..      v11(t + 1, c11) - v11(t, c11) =l= maxac * delta;
ac12(t + 1, c12)..      v12(t + 1, c12) - v12(t, c12) =l= maxac * delta;
ac21(t + 1, c21)..      v21(t + 1, c21) - v21(t, c21) =l= maxac * delta;
ac22(t + 1, c22)..      v22(t + 1, c22) - v22(t, c22) =l= maxac * delta;
ac32(t + 1, c32)..      v32(t + 1, c32) - v32(t, c32) =l= maxac * delta;
ac33(t + 1, c33)..      v33(t + 1, c33) - v33(t, c33) =l= maxac * delta;
ac42(t + 1, c42)..      v42(t + 1, c42) - v42(t, c42) =l= maxac * delta;
ac43(t + 1, c43)..      v43(t + 1, c43) - v43(t, c43) =l= maxac * delta;

dc11(t + 1, c11)..      v11(t + 1, c11) - v11(t, c11) =g= -maxdc * delta;
dc12(t + 1, c12)..      v12(t + 1, c12) - v12(t, c12) =g= -maxdc * delta;
dc21(t + 1, c21)..      v21(t + 1, c21) - v21(t, c21) =g= -maxdc * delta;
dc22(t + 1, c22)..      v22(t + 1, c22) - v22(t, c22) =g= -maxdc * delta;
dc32(t + 1, c32)..      v32(t + 1, c32) - v32(t, c32) =g= -maxdc * delta;
dc33(t + 1, c33)..      v33(t + 1, c33) - v33(t, c33) =g= -maxdc * delta;
dc42(t + 1, c42)..      v42(t + 1, c42) - v42(t, c42) =g= -maxdc * delta;
dc43(t + 1, c43)..      v43(t + 1, c43) - v43(t, c43) =g= -maxdc * delta;

cons_v11(t, c11)..      v11(t, c11) * n11(t, c11) * m11(t, c11) =l= v_max2;
cons_v12(t, c12)..      v12(t, c12) * n12(t, c12) * m12(t, c12) =l= v_max2;
cons_v21(t, c21)..      v21(t, c21) * n21(t, c21) * m21(t, c21) =l= v_max2;
cons_v22(t, c22)..      v22(t, c22) * n22(t, c22) * m22(t, c22) =l= v_max2;
cons_v32(t, c32)..      v32(t, c32) * n32(t, c32) * m32(t, c32) =l= v_max2;
cons_v33(t, c33)..      v33(t, c33) * n33(t, c33) * m33(t, c33) =l= v_max2;
cons_v42(t, c42)..      v42(t, c42) * n42(t, c42) * m42(t, c42) =l= v_max2;
cons_v43(t, c43)..      v43(t, c43) * n43(t, c43) * m43(t, c43) =l= v_max2;

cons_n11_1(t, c11)..    y11(t, c11) =l= B * n11(t, c11);
cons_n11_2(t, c11)..    y11(t, c11) =g= B * (n11(t, c11) - 1);
cons_m11_1(t, c11)..    x11(t, c11) =l= B * m11(t, c11);
cons_m11_2(t, c11)..    x11(t, c11) =g= B * (m11(t, c11) - 1);

cons_n12_1(t, c12)..    y12(t, c12) =l= B * n12(t, c12);
cons_n12_2(t, c12)..    y12(t, c12) =g= B * (n12(t, c12) - 1);
cons_m12_1(t, c12)..    width - y12(t, c12) =l= B * m12(t, c12);
cons_m12_2(t, c12)..    width - y12(t, c12) =g= B * (m12(t, c12) - 1);

cons_n21_1(t, c21)..    width - x21(t, c21) =l= B * n21(t, c21);
cons_n21_2(t, c21)..    width - x21(t, c21) =g= B * (n21(t, c21) - 1);
cons_m21_1(t, c21)..    y21(t, c21) =l= B * m21(t, c21);
cons_m21_2(t, c21)..    y21(t, c21) =g= B * (m21(t, c21) - 1);

cons_n22_1(t, c22)..    width - x22(t, c22) =l= B * n22(t, c22);
cons_n22_2(t, c22)..    width - x22(t, c22) =g= B * (n22(t, c22) - 1);
cons_m22_1(t, c22)..    x22(t, c22) =l= B * m22(t, c22);
cons_m22_2(t, c22)..    x22(t, c22) =g= B * (m22(t, c22) - 1);

cons_n32_1(t, c32)..    width - y32(t, c32) =l= B * n32(t, c32);
cons_n32_2(t, c32)..    width - y32(t, c32) =g= B * (n32(t, c32) - 1);
cons_m32_1(t, c32)..    y32(t, c32) =l= B * m32(t, c32);
cons_m32_2(t, c32)..    y32(t, c32) =g= B * (m32(t, c32) - 1);

cons_n33_1(t, c33)..    width - y33(t, c33) =l= B * n33(t, c33);
cons_n33_2(t, c33)..    width - y33(t, c33) =g= B * (n33(t, c33) - 1);
cons_m33_1(t, c33)..    width - x33(t, c33) =l= B * m33(t, c33);
cons_m33_2(t, c33)..    width - x33(t, c33) =g= B * (m33(t, c33) - 1);

cons_n42_1(t, c42)..    x42(t, c42) =l= B * n42(t, c42);
cons_n42_2(t, c42)..    x42(t, c42) =g= B * (n42(t, c42) - 1);
cons_m42_1(t, c42)..    width - x42(t, c42) =l= B * m42(t, c42);
cons_m42_2(t, c42)..    width - x42(t, c42) =g= B * (m42(t, c42) - 1);

cons_n43_1(t, c43)..    x43(t, c43) =l= B * n43(t, c43);
cons_n43_2(t, c43)..    x43(t, c43) =g= B * (n43(t, c43) - 1);
cons_m43_1(t, c43)..    width - y43(t, c43) =l= B * m43(t, c43);
cons_m43_2(t, c43)..    width - y43(t, c43) =g= B * (m43(t, c43) - 1);

posx11_2(t + 1, c11)..      x11_2(t + 1, c11) =e= x11(t, c11) - ((v11(t, c11) + v11(t + 1, c11)) * delta / 2 / arc_left) * r_left;
posx11_3(t + 1, c11)..      x11_3(t + 1, c11) =e= x11(t, c11) - (v11(t, c11) + v11(t + 1, c11)) * delta / 2;
posy11_1(t + 1, c11)..      y11_1(t + 1, c11) =e= y11(t, c11) + (v11(t, c11) + v11(t + 1, c11)) * delta / 2;
posy11_2(t + 1, c11)..      y11_2(t + 1, c11) =e= y11(t, c11) + ((v11(t, c11) + v11(t + 1, c11)) * delta / 2 / arc_left) * r_left;

posx21_1(t + 1, c21)..      x21_1(t + 1, c21) =e= x21(t, c21) - (v21(t, c21) + v21(t + 1, c21)) * delta / 2;
posx21_2(t + 1, c21)..      x21_2(t + 1, c21) =e= x21(t, c21) - ((v21(t, c21) + v21(t + 1, c21)) * delta / 2 / arc_left) * r_left;
posy21_2(t + 1, c21)..      y21_2(t + 1, c21) =e= y21(t, c21) - ((v21(t, c21) + v21(t + 1, c21)) * delta / 2 / arc_left) * r_left;
posy21_3(t + 1, c21)..      y21_3(t + 1, c21) =e= y21(t, c21) - (v21(t, c21) + v21(t + 1, c21)) * delta / 2;

posx33_2(t + 1, c33)..      x33_2(t + 1, c33) =e= x33(t, c33) + ((v33(t, c33) + v33(t + 1, c33)) * delta / 2 / arc_left) * r_left;
posx33_3(t + 1, c33)..      x33_3(t + 1, c33) =e= x33(t, c33) + (v33(t, c33) + v33(t + 1, c33)) * delta / 2;
posy33_1(t + 1, c33)..      y33_1(t + 1, c33) =e= y33(t, c33) - (v33(t, c33) + v33(t + 1, c33)) * delta / 2;
posy33_2(t + 1, c33)..      y33_2(t + 1, c33) =e= y33(t, c33) - ((v33(t, c33) + v33(t + 1, c33)) * delta / 2 / arc_left) * r_left;

posx43_1(t + 1, c43)..      x43_1(t + 1, c43) =e= x43(t, c43) + (v43(t, c43) + v43(t + 1, c43)) * delta / 2;
posx43_2(t + 1, c43)..      x43_2(t + 1, c43) =e= x43(t, c43) + ((v43(t, c43) + v43(t + 1, c43)) * delta / 2 / arc_left) * r_left;
posy43_2(t + 1, c43)..      y43_2(t + 1, c43) =e= y43(t, c43) + ((v43(t, c43) + v43(t + 1, c43)) * delta / 2 / arc_left) * r_left;
posy43_3(t + 1, c43)..      y43_3(t + 1, c43) =e= y43(t, c43) + (v43(t, c43) + v43(t + 1, c43)) * delta / 2;

safe11_1(t, c11 - 1)..      y11_1(t, c11 - 1) - y11_1(t, c11) =g= L + 2 * (v11(t, c11) - v11(t, c11 - 1)) - B * (n11(t, c11 - 1) * (1 - m11(t, c11 - 1)) + n11(t, c11 - 1) * m11(t, c11 - 1));
safe11_3(t, c11 - 1)..      x11_3(t, c11) - x11_3(t, c11 - 1) =g= L + 2 * (v11(t, c11) - v11(t, c11 - 1)) - B * (m11(t, c11) * (1 - n11(t, c11)) + n11(t, c11) * m11(t, c11));

safe21_1(t, c21 - 1)..      x21_1(t, c21) - x21_1(t, c21 - 1) =g= L + 2 * (v21(t, c21) - v21(t, c21 - 1)) - B * (n21(t, c21 - 1) * (1 - m21(t, c21 - 1)) + n21(t, c21 - 1) * m21(t, c21 - 1));
safe21_3(t, c21 - 1)..      y21_3(t, c21) - y21_3(t, c21 - 1) =g= L + 2 * (v21(t, c21) - v21(t, c21 - 1)) - B * (m21(t, c21) * (1 - n21(t, c21)) + n21(t, c21) * m21(t, c21));
safe33_1(t, c33 - 1)..      y33_1(t, c33) - y33_1(t, c33 - 1) =g= L + 2 * (v33(t, c33) - v33(t, c33 - 1)) - B * (n33(t, c33 - 1) * (1 - m33(t, c33 - 1)) + n33(t, c33 - 1) * m33(t, c33 - 1));
safe33_3(t, c33 - 1)..      x33_3(t, c33 - 1) - x33_3(t, c33) =g= L + 2 * (v33(t, c33) - v33(t, c33 - 1)) - B * (m33(t, c33) * (1 - n33(t, c33)) + n33(t, c33) * m33(t, c33));
safe43_1(t, c43 - 1)..      x43_1(t, c43 - 1) - x43_1(t, c43) =g= L + 2 * (v43(t, c43) - v43(t, c43 - 1)) - B * (n43(t, c43 - 1) * (1 - m43(t, c43 - 1)) + n43(t, c43 - 1) * m43(t, c43 - 1));
safe43_3(t, c43 - 1)..      y43_3(t, c43 - 1) - y43_3(t, c43) =g= L + 2 * (v43(t, c43) - v43(t, c43 - 1)) - B * (m43(t, c43) * (1 - n43(t, c43)) + n43(t, c43) * m43(t, c43));

safe12(t, c12 - 1)..        y12(t, c12 - 1) - y12(t, c12) =g= L + 2 * (v12(t, c12) - v12(t, c12 - 1));
safe22(t, c22 - 1)..        x22(t, c22) - x22(t, c22 - 1) =g= L + 2 * (v22(t, c22) - v22(t, c22 - 1));
safe32(t, c32 - 1)..        y32(t, c32) - y32(t, c32 - 1) =g= L + 2 * (v32(t, c32) - v32(t, c32 - 1));
safe42(t, c42 - 1)..        x42(t, c42 - 1) - x42(t, c42) =g= L + 2 * (v42(t, c42) - v42(t, c42 - 1));

next_posx11(t + 1, c11)..   x11(t + 1, c11) =e= fix4 * (1 - n11(t + 1, c11)) * m11(t + 1, c11) + x11_2(t + 1, c11) * n11(t + 1, c11) * m11(t + 1, c11) + x11_3(t + 1, c11) * n11(t + 1, c11) * (1 - m11(t + 1, c11));
next_posx21(t + 1, c21)..   x21(t + 1, c21) =e= x21_1(t + 1, c21) * (1 - n21(t + 1, c21)) * m21(t + 1, c21) + x21_2(t + 1, c21) * n21(t + 1, c21) * m21(t + 1, c21) + fix3 * n21(t + 1, c21) * (1 - m21(t + 1, c21));
next_posx33(t + 1, c33)..   x33(t + 1, c33) =e= fix3 * (1 - n33(t + 1, c33)) * m33(t + 1, c33) + x33_2(t + 1, c33) * n33(t + 1, c33) * m33(t + 1, c33) + x33_3(t + 1, c33) * n33(t + 1, c33) * (1 - m33(t + 1, c33));
next_posx43(t + 1, c43)..   x43(t + 1, c43) =e= x43_1(t + 1, c43) * (1 - n43(t + 1, c43)) * m43(t + 1, c43) + x43_2(t + 1, c43) * n43(t + 1, c43) * m43(t + 1, c43) + fix4 * n43(t + 1, c43) * (1 - m43(t + 1, c43));

next_posy11(t + 1, c11)..   y11(t + 1, c11) =e= y11_1(t + 1, c11) * (1 - n11(t + 1, c11)) * m11(t + 1, c11) + y11_2(t + 1, c11) * n11(t + 1, c11) * m11(t + 1, c11) + fix4 * n11(t + 1, c11) * (1 - m11(t + 1, c11));
next_posy21(t + 1, c21)..   y21(t + 1, c21) =e= fix4 * (1 - n21(t + 1, c21)) * m21(t + 1, c21) + y21_2(t + 1, c21) * n21(t + 1, c21) * m21(t + 1, c21) + y21_3(t + 1, c21) * n21(t + 1, c21) * (1 - m21(t + 1, c21));
next_posy33(t + 1, c33)..   y33(t + 1, c33) =e= y33_1(t + 1, c33) * (1 - n33(t + 1, c33)) * m33(t + 1, c33) + y33_2(t + 1, c33) * n33(t + 1, c33) * m33(t + 1, c33) + fix3 * n33(t + 1, c33) * (1 - m33(t + 1, c33));
next_posy43(t + 1, c43)..   y43(t + 1, c43) =e= fix3 * (1 - n43(t + 1, c43)) * m43(t + 1, c43) + y43_2(t + 1, c43) * n43(t + 1, c43) * m43(t + 1, c43) + y43_3(t + 1, c43) * n43(t + 1, c43) * (1 - m43(t + 1, c43));

next_posx22(t + 1, c22)..   x22(t + 1, c22) =e= x22(t, c22) - (v22(t, c22) + v22(t + 1, c22)) * delta / 2;
next_posx42(t + 1, c42)..   x42(t + 1, c42) =e= x42(t, c42) + (v42(t, c42) + v42(t + 1, c42)) * delta / 2;
next_posy12(t + 1, c12)..   y12(t + 1, c12) =e= y12(t, c12) + (v12(t, c12) + v12(t + 1, c12)) * delta / 2;
next_posy32(t + 1, c32)..   y32(t + 1, c32) =e= y32(t, c32) - (v32(t, c32) + v32(t + 1, c32)) * delta / 2;
